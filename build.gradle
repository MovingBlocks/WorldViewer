plugins {
    id "org.standardout.versioneye" version "1.0.1"
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'application'

group = 'org.terasology'
version = getFullVersion()

sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = 'org.terasology.worldviewer.WorldViewer'
applicationDefaultJvmArgs = ["-Xmx3g", "-splash:${sourceSets.main.output.resourcesDir}/splash.jpg"]

// We use both Maven Central and our own Artifactory instance, which contains module builds, extra libs, and so on
repositories {
    mavenCentral()
    maven {
        url "http://artifactory.terasology.org/artifactory/virtual-repo-live"
    }
}

def getGitDesc() {
    def cmd = 'git describe --long --match *.*.0'

    try {
        def proc = cmd.execute()
        proc.waitFor()                        // wait for the command to finish
        def desc = proc.in.text.trim()        // "out" from the process is "in" for gradle
        return desc;
    } catch (IOException e) {
        logger.warn("Could not run '$cmd'")
        return "0.0.0-0-0000000"
    }
}

def getVersionInfo() {
    def desc = getGitDesc()
    def matcher = desc =~ "(\\d+)\\.(\\d+)\\.0-(\\d+)-g([0-9A-Za-z]*)"
    if (!matcher || !matcher.matches()) {
       logger.warn("Version '$desc' does not match format: 'd.d.0-d-gHHHHHHH'")
       return ["0", "0", "0", "0000000"]
    } else {
        def major = matcher.group(1)
        def minor = matcher.group(2)
        def patch = matcher.group(3)
        def sha = matcher.group(4)
        return [major, minor, patch, sha]
    }
}

def getFullVersion() {
    def (major, minor, patch, sha) = getVersionInfo()
    return "$major.$minor.$patch+$sha";
}

task createVersionFile(type:Copy) {
    description = 'Creates a java version file based on the template in the resources folder'
    
    inputs.property('version', version)    // trigger executing by setting a property

    from ('src/main/resources/VersionInfo.template')
    into ('src/main/java/org/terasology/worldviewer/version')
    rename '(.*).template', '$1.java'

    def (major, minor, patch, sha) = getVersionInfo()
    
    expand(
        BUILD_VERSION_MAJOR: major,
        BUILD_VERSION_MINOR: minor,
        BUILD_VERSION_PATCH: patch,
        BUILD_SHA: sha,
        BUILD_TIME: java.time.ZonedDateTime.now().toString());
}


task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

compileJava.dependsOn createVersionFile
eclipseProject.dependsOn createVersionFile

configurations {
    codeMetrics
}

dependencies {

    codeMetrics(group: 'org.terasology.config', name: 'codemetrics', version: '1.0.0', ext: 'zip')

    checkstyle ('com.puppycrawl.tools:checkstyle:6.8.1')
    pmd ('net.sourceforge.pmd:pmd-core:5.3.2')
    pmd ('net.sourceforge.pmd:pmd-java:5.3.2')

    compile (group: 'args4j', name: 'args4j', version: '2.32')

    compile (group: 'org.terasology.engine', name: 'engine', version: '0.54.0-SNAPSHOT')

    compile (group: 'org.terasology.modules', name: 'Core', version: '+')
    compile (group: 'org.terasology.modules', name: 'Cities', version: '+')
    compile (group: 'org.terasology.modules', name: 'Pathfinding', version: '+')
    compile (group: 'org.terasology.modules', name: 'TutorialWorldGeneration', version: '+')
    compile (group: 'org.terasology.modules', name: 'LightAndShadow', version: '+')
    compile (group: 'org.terasology.modules', name: 'WoodAndStone', version: '+')
    compile (group: 'org.terasology.modules', name: 'PolyWorld', version: '+')

    // Mockups for Environments
    compile (group: 'org.mockito', name: 'mockito-all', version: '1.10.19')
}

task sourceJar(type: Jar) {
    description = "Create a JAR with all sources"
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    description = "Create a JAR with the JavaDoc for the java sources"
    from javadoc.destinationDir
    classifier = 'javadoc'
}



// Define the artifacts we want to publish (the .pom will also be included since the Maven plugin is active)
artifacts {
    archives sourceJar
    archives javadocJar
}

jar {
    manifest {
        attributes("Main-Class": mainClassName)
        attributes("Class-Path" : configurations.runtime.collect { it.getName() }.join(" "))
        attributes("Implementation-Title": "WorldViewer")
        attributes("Implementation-Version": version)
        attributes("SplashScreen-Image": "splash.jpg")
    }
}

distZip {
    // remove the version number from the zip file name
    // the name of the zip file will thus be independent from the version
    version = ''
}

checkstyle {
    ignoreFailures = true
    config = resources.text.fromArchiveEntry(configurations.codeMetrics, "checkstyle/checkstyle.xml")
    // this assigns the property variable ${samedir} in checkstyle.xml
    configProperties.samedir = config.asFile().parent
}

configure([checkstyleMain, checkstyleTest]) { 
    doFirst {
        def suppressions = resources.text.fromArchiveEntry(configurations.codeMetrics, "checkstyle/suppressions.xml")
        // the asFile() method extracts the file from the zip archive and puts it next to checkstyle.xml
        // this procedure should not be done in the config phase, since the clean task would erase the file before it can be used
        suppressions.asFile()
    }
}

pmd {
    ignoreFailures = true
    ruleSetConfig = resources.text.fromArchiveEntry(configurations.codeMetrics, "pmd/pmd.xml")
    ruleSets = []
}

findbugs {
    ignoreFailures = true
    effort = 'max'
    reportLevel = 'medium'
    toolVersion = '3.0.1'
    excludeFilterConfig = resources.text.fromArchiveEntry(configurations.codeMetrics, "findbugs/findbugs-exclude.xml")
}
