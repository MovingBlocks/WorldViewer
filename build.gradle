apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'application'

group = 'org.terasology'
version = getGitDesc()

sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = 'org.terasology.worldviewer.WorldViewer'
applicationDefaultJvmArgs = ["-Xmx3g"]

// We use both Maven Central and our own Artifactory instance, which contains module builds, extra libs, and so on
repositories {
    mavenCentral()
    maven {
        url "http://artifactory.terasology.org/artifactory/repo"
    }
}

import java.text.SimpleDateFormat;

def env = System.getenv()
def versionInfoFile = new File(sourceSets.main.output.resourcesDir, 'versionInfo.properties')
    
def getGitDesc() {
    def cmd = "git describe --match ?.?*"

    try {
        def proc = cmd.execute()
        proc.waitFor()                    // wait for the command to finish
        return proc.in.text.trim()        // "out" from the process is "in" for gradle
    } catch (IOException e) {
        logger.warn("Could not run '$cmd' - using date - {}", e.getLocalizedMessage());
        return new Date().format('yyyy-MM-dd-HH-mm-ss');
    }
}


task createVersionJavaFile(type:Copy) {
    description = 'Creates a java version file based on the template in the resources folder'
    def version = getGitDesc()
    
    inputs.property('version', version)    // trigger executing by setting a property

    from('src/main/resources/GitVersion.template')
    into('src/main/java/version')
    rename '(.*).template', '$1.java'

    expand(GIT_VERSION: version)
    
    doLast {
        logger.lifecycle("Updated 'GitVersion.java' to version $version");
    }
}


task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

compileJava.dependsOn createVersionJavaFile
eclipseProject.dependsOn createVersionJavaFile

configurations {
    checkstyleConfig
    findbugsConfig
    pmdConfig
}

// by default gradle will check for updates (deps. with changing flag) every 24h
configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {

	checkstyleConfig(group: 'org.terasology.config', name: 'checkstyle', version: '1.0.0', ext: 'zip')
    pmdConfig (group: 'org.terasology.config', name: 'pmd', version: '1.0.0', ext: 'zip')
    findbugsConfig (group: 'org.terasology.config', name: 'findbugs-exclude', version: '1.0.0', ext: 'zip') 
	
    checkstyle ('com.puppycrawl.tools:checkstyle:6.4.1')
    pmd ('net.sourceforge.pmd:pmd-core:5.2.3')
    pmd ('net.sourceforge.pmd:pmd-java:5.2.3') 

    // the deps. without a fixed version number are flagged with 'changing: true'
    // to indicate that gradle should check for updates
	
    compile (group: 'args4j', name: 'args4j', version: '2.0.29')

    compile (group: 'org.terasology.engine', name: 'engine', version: '+', changing: true)
    compile (group: 'org.terasology.modules', name: 'Core', version: '+', changing: true)
    compile (group: 'org.terasology', name: 'TeraMath', version: '+', changing: true)

    compile(group: 'org.terasology.modules', name: 'CommonWorld', version: '+', changing: true)
    compile(group: 'org.terasology.modules', name: 'PolyWorld', version: '+', changing: true)

    // Environments
    compile (group: 'org.mockito', name: 'mockito-all', version: '1.10.19')
    compile (group: 'com.jgoodies', name: 'jgoodies-looks', version: '2.5.3')
}

task sourceJar(type: Jar) {
    description = "Create a JAR with all sources"
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    description = "Create a JAR with the JavaDoc for the java sources"
    from javadoc.destinationDir
    classifier = 'javadoc'
}



// Define the artifacts we want to publish (the .pom will also be included since the Maven plugin is active)
artifacts {
    archives sourceJar
    archives javadocJar
}

task createVersionInfoFile {
    File infoFile = new File(buildDir, "version.txt")
    outputs.file infoFile
    doLast {
        infoFile.write("Version $version")
    }
}

applicationDistribution.from(createVersionInfoFile) {
//    into "docs"
}

distZip {
    // remove the version number from the zip file name
    // the name of the zip file will thus be independent from the version
    version = ''
}

checkstyle {
    ignoreFailures = true
    config = resources.text.fromArchiveEntry(configurations.checkstyleConfig, "checkstyle.xml")
}

pmd {
    ignoreFailures = true
    ruleSetConfig = resources.text.fromArchiveEntry(configurations.pmdConfig, "pmd.xml")
}

findbugs {
    ignoreFailures = true
    effort = 'max'
    reportLevel = 'medium'
    excludeFilterConfig = resources.text.fromArchiveEntry(configurations.findbugsConfig, "findbugs-exclude.xml")
}
